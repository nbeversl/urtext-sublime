%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: Urtext
file_extensions: 
  - txt
scope: urtext

contexts:
  main:    
    - include: datestamp
    - include: link
    - include: link_prefix
    - include: link_title
    - include: other-project-link
    - include: compact-node-opener
    - include: ending_node_id
    - include: inline-metadata-key 
    - include: inline-metadata-value
    - include: inline-metadata-separator
    - match: \[\[
      scope: punctuation.section.braces.begin.dynamic_definition.urtext
      push: dynamic-definition
    - match: '{{'
      scope: punctuation.section.braces.begin.inline_node.urtext
      push: inline-node-1
    - match: '}}'
      scope: invalid.illegal.stray-bracket-end
    - match: 'SCOPE-HTML'
      embed: Packages/HTML/HTML.sublime-syntax
      embed_scope: urtext.html
      escape: '%%-END'
      escape-captures: 0
    - match: '%%-JSON'
      embed: Packages/JavaScript/JSON.sublime-syntax
      embed_scope: urtext.json
      escape: '%%-END'
      escape-captures: 0
    - match: '%%-PYTHON'
      embed: Packages/Python/Python.sublime-syntax
      embed_scope: urtext.json
      escape: '%%-END'
      escape-captures: 0

    - match: '%%-MARKDOWN'
      embed: Packages/Markdown/Markdown.sublime-syntax
      embed_scope: urtext.markdown
      escape: '%%-END'
      escape-captures: 0
  
  # Dynamic Definition Closing Wrapper

  dynamic-definition:
    - meta_scope: dynamic-definition
    - include: link_title
    - include: link

    - match: (INCLUDE|EXCLUDE|METADATA|TAG_ALL)(?=\()
      scope: function-name.urtext
      push: function-with-key-values
    
    - match: (SHOW|SEARCH)(?=\()
      scope: function-name.urtext
      push: function-with-format-string
    
    - match: (SORT|TIMELINE|FORMAT|LIMIT|EXPORT)(?=\()
      scope: function-name.urtext
      push: function-with-keywords-only
   
    - match: (ID|TREE)(?=\()
      scope: function-name.urtext
      push: function-with-node-id

    - match: (FILE)(?=\()
      scope: function-name.urtext
      push: function-with-filename
    
    - match: \]\]
      scope: punctuation.section.braces.end.dynamic_definition.urtext
      pop: true
   
  # Functions using key-value pairs, values with string literals, and keywords
  # INCLUDE, EXCLUDE, METADATA

  function-with-key-values:
    - match: \(
      scope: dynamic-definition-parens
      push: function-key-value-keyword-parameters
    - match: (?<=\))
      pop: true

  function-key-value-keyword-parameters:
    - include: key-value 
    - include: dynamic-keyword
    - include: datestamp
    - match: \)
      scope: dynamic-definition-parens
      pop: true

  key-value:
    - match: '(\w+)\s?[=|~|?|(::)]\s?([^\n;)]+)([\n;]?)'
      captures:
        1: dynamic-key.urtext
        2: dynamic-value.urtext  
        3: dynamic-delimiter.urtext  


  dynamic-keyword:
    - match: '[\s](-n(um)?|-r(everse)?|-rr?|-la(st-accessed)?|-p(reformat)?|all|-use-timestamp|-t|and|or|-all-projects|-*p|-multiline_meta|-mm|-markdown|-md|-html|-plaintext|-txt|-recursive)\b'
      scope: dynamic-keyword.urtext

  # SHOW() function - uses only format string

  function-with-format-string:
    - match: \(
      scope: dynamic-definition-parens
      push: function-with-format-string-parameters
    - match: (?<=\))
      pop: true

  function-with-format-string-parameters:
    - meta_scope: format-string.urtext
    - include: var-word
    - match: \)
      scope: dynamic-definition-parens
      pop: true

  var-word:
    - meta_scope: format-string.urtext
    - match: \$[A-Za-z0-9_-]+
      scope: dynamic-def-format-var.urtext
   
  
  # Functions with keywords only 
  # SORT, TIMELINE

  function-with-keywords-only:
    - match: \(
      scope: dynamic-definition-parens
      push: function-with-keywords-only-parameters
    - match: (?<=\))
      pop: true

  function-with-keywords-only-parameters:
    - include: dynamic-keyword
    - match: \)
      scope: dynamic-definition-parens
      pop: true

  # Functions with node ID
  # ID, TREE

  function-with-node-id:
    - match: \(
      scope: dynamic-definition-parens
      push: function-with-node-id-parameters
    - match: (?<=\))
      pop: true

  function-with-node-id-parameters:
    - include: node-id-in-dynamic-definition
    - match: \)
      scope: dynamic-definition-parens
      pop: true

  node-id-in-dynamic-definition:
    - match: '\b[0-9,a-z]{3}\b'
      scope: dynamic-def-node_id.urtext


  # Functions with optional parameters
  # ACCESS_HISTORY

  function-with-optional-parameters:
    - match: \(
      scope: dynamic-definition-parens
      push: function-with-keywords-only-parameters
    - match: (?<=\))
      pop: true

  function-with-filename:
    - match: \(
      scope: dynamic-definition-parens
      push: function-with-filename
    - match: (?<=\))
      pop: true

  # Node Nesting

  inline-node-1: 
    - meta_scope: inline_node_1 
    - include: datestamp
    - include: inline-metadata-key 
    - include: inline-metadata-value
    - include: inline-metadata-separator
    - match: '{{'
      scope: punctuation.section.braces.begin.inline_node.urtext
      push: inline-node-2
    - match: '}}'
      scope: punctuation.section.braces.end.inline_node.urtext
      pop: true
    - include: main
   
  inline-node-2: 
    - meta_scope: inline_node_2 
    - include: datestamp
    - include: inline-metadata-key 
    - include: inline-metadata-value
    - include: inline-metadata-separator
    - match: '}}'
      scope: punctuation.section.braces.end.inline_node.urtext
      pop: true
    - match: '{{'
      scope: punctuation.section.braces.begin.inline_node.urtext
      push: inline-node-3
    - include: main

  inline-node-3: 
    - meta_scope: inline_node_3
    - include: datestamp
    - match: '}}'
      scope: punctuation.section.braces.end.inline_node.urtext
      pop: true
    - match: '{{'
      scope: punctuation.section.braces.begin.inline_node.urtext
      push: inline-node-4
    - include: main

  inline-node-4: 
    - meta_scope: inline_node_4
    - include: datestamp
    - match: '}}'
      scope: punctuation.section.braces.end.inline_node.urtext
      pop: true
    - match: '{{'
      scope: punctuation.section.braces.begin.inline_node.urtext
      push: inline-node-5
    - include: main

  inline-node-5: 
    - meta_scope: inline_node_5
    - include: datestamp
    - match: '}}'
      scope: punctuation.section.braces.end.inline_node.urtext
      pop: true
    - include: main

  link_prefix:
    - match: '>(?=([0-9,a-z]{3}))'
      scope: link_prefix.urtext

  link:
    - match: '(?<=>)[0-9,a-z]{3}'
      scope: link.urtext

  link_title:
    - match: '\|[^<][^\s]{2}.*?(?=>[0-9,a-z]{3}\b)'
      scope: link_title.urtext

  url: # not yet styled
    - match: '[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)'
      scope: url_link.urtext

  task-status:
    - match: '\s(DONE|REMOVED|TODO|IN PROGRESS)'
      scope: markup.bold

  meta-key-terminator:
    - match: ';'
      scope: punctuation.terminator.urtext

  datestamp:
    - match: <.*?>
      scope: entity.name.struct.datestamp.urtext

  tagname-separator:
    - match: ';'
      scope: entity.name.tagname_separator.urtext

  tagvalue-separator:
    - match: '\|'
      scope: entity.name.tagvalue_separator.urtext

  node_id:
    - match: '\b[0-9,a-z]{3}\b'
      scope: entity.name.struct.node_id.urtext

  ending_node_id:
    - match: '\b[0-9,a-z]{3}(?=}})'
      scope: entity.name.struct.node_id.urtext

  other-project-link:
    - match: '\{\"(.*?)\"\}'
      scope: link.urtext.other-project

  compact-node-opener:
    - match: ^[^\S\n]*\^
      push: compact-node
      scope: urtext.compact_node_marker
   
  compact-node: 
    - include: datestamp
    - include: main
    - include: inline-node-1
    - match: .*?
    - meta_scope: urtext.compact_node 
    - match: $
      pop: true
  
  inline-metadata-key:
    - match: \w+?(?=::)
      scope: urtext.inline_meta_key

  inline-metadata-value:
    - match: (?<=::)[^\s][^\n};]+;?
      scope: urtext.inline_meta_value

  inline-metadata-separator:
    - match: '::'
      scope: urtext.inline_meta_separator

