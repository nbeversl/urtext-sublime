%YAML 1.2
---
name: Urtext
file_extensions: 
  - txt
scope: urtext

contexts:
  main: 
    - include: syntax-main
    - include: bold-text
    - include: url
    - match: '(?<!\\){'
      scope: punctuation.section.braces.begin.inline_node_1.urtext
      push: inline-node-1
    - match: '(?<!\\)}'
      scope: invalid.illegal.stray-bracket-end
  
  syntax-main:    
    - include: node_pointer
    - include: dynamic-definition-reference
    - include: node_link
    - include: other-project-link
    - include: file_link
    - include: shorthand_meta
    - match: \[\[
      scope: punctuation.section.braces.begin.dynamic_definition.urtext
      push: dynamic-definition
    - include: node_title

    - include: trigger

    - match: '`'
      push: raw 

    - match: '(\|\s)[^_>\n\\|r]+\s>{1,2}'
      scope: link_title
    
    - match: '(?<=::)'
      push: metadata-value

    - match: '(?<=::)<'
      push: metadata-timestamp
    
    - match:  \w+?(?=::)
      scope: meta_key.urtext

    - match: <[^!\s-]
      push: datestamp

    - match: <!!
      push: system-message
      
    # Embedded Syntaxes
    - match: '%%-PYTHON'
      scope: pass_marker
      embed: Packages/Python/Python.sublime-syntax
      embed_scope: python.urtext
      escape: '%%-PYTHON-END'
      escape-captures: 0
    
    - match: '%%-HTML'
      scope: pass_marker.urtext
      embed: Packages/HTML/HTML.sublime-syntax
      embed_scope: html.urtext
      escape: '%%-HTML-END'
      escape_captures: 0
    
    - match: '%%-JSON'
      scope: pass_marker.urtext
      embed: Packages/JSON/JSON.sublime-syntax
      embed_scope: json.urtext
      escape: '%%-JSON-END'
      escape_captures: 0

    - match: '%%-PLAINTEXT'
      scope: pass_marker.urtext
      embed: Packages/JavaScript/text.sublime-syntax
      embed_scope: text.urtext
      escape: '%%-PLAINTEXT-END'
      escape_captures: 0

    - match: '%%-PHP'
      scope: pass_marker.urtext
      embed: Packages/PHP/PHP Source.sublime-syntax
      embed_scope: php.urtext
      escape: '%%-PHP-END'
      escape_captures: 0

    - match: '%%-DOC'
      scope: pass_marker.urtext
      escape: '%%-DOC-END'
      escape_captures: 0

    - match: '%%-[A-Z-]*'
      embed: Packages/JavaScript/text.sublime-syntax
      scope: pass_marker.urtext
      embed_scope: text.urtext
      escape: '%%-[A-Z-]*-END'
      escape_captures: 0

  trigger:
    - match: '(>>>[A-Z_]+)(?=\()'
      scope: trigger_name.urtext
      push: trigger-with-args

  trigger-with-args:    
    - match: \(
      scope: dynamic-definition-parens
      push: function-key-value-keyword-parameters
    - match: (?<=\))
      pop: true

  # Metadata  
  metadata-value:
    - meta_scope: meta_value.urtext
    - match: <
      push: datestamp
    - include: tagvalue-separator
    - include: node_link
    - include: file_link    
    - match: ;|\n|(?=\})
      pop: true

  shorthand_meta:
    - match: '(?:^|\s)#[A-Z,a-z].*?\b'
      scope: hash_meta.urtext

  datestamp:
    - meta_scope: entity.name.struct.datestamp.urtext
    - match: '>'
      pop: true

  system-message:
    - meta_scope: entity.name.struct.message.urtext
    - match: '!!>'
      pop: true

  metadata-timestamp:
    - meta_scope: entity.name.struct.datestamp.urtext
    - match: '>'
      set: metadata-value

  # Dynamic Definition Closing Wrapper

  dynamic-definition:
    - meta_scope: dynamic-definition

    - match: '`'
      push: raw 
    
    - match: '(\|\s)[^_>\n\\|r]+\s>{1,2}'
      scope: link_title
      
    - include: node_link
    - include: file_link

    - match: ((\+|\-)|([A-Z_]+)(?=\())
      scope: function-name.urtext
      push: function-with-key-values
    
    - match: \]\]
      scope: punctuation.section.braces.end.dynamic_definition.urtext
      pop: true
   
  function-with-key-values:    
    - match: \(
      scope: dynamic-definition-parens
      push: function-key-value-keyword-parameters
    - match: (?<=\))
      pop: true

  function-with-node-syntax:
    - match: \(
      scope: dynamic-definition-parens
      push: function-node-syntax
    - match: (?<=\))
      pop: true

  function-node-syntax:
    - meta_scope: node_syntax_in_param.urtext
    - include: node_link
    - match:  \w+?(?=::)
      scope: meta_key.urtext
    
    - include: other-project-link
 
    - match: \)
      scope: dynamic-definition-parens
      pop: true   
    - match: <
      push: datestamp
    - match: \)
      scope: dynamic-definition-parens
      pop: true

  function-key-value-keyword-parameters:
    - include: dynamic-keyword
    - include: key-value 
    - include: asterisk
    - match: <[^!\s-]
      push: datestamp
    - match: \)
      scope: dynamic-definition-parens
      pop: true

  key-value:
    - match: '(\w+)\s?[=|~|?]\s?([^\n;\-)]+)([\n;]?)'
      captures:
        1: dynamic-key.urtext
        2: dynamic-value.urtext  
        3: dynamic-delimiter.urtext  

  output-flags:
    - match: '(-tree|-list|-collection|-search|-interlinks|-plaintext|-txt|-markdown|-md|-html)'
      scope: dynamic-keyword.urtext

  dynamic-keyword:
    - match: '(\s)(-[a-z_]+)\b'
      scope: dynamic-keyword.urtext

  asterisk:
    - match: '(?<=\(|\s)\*(?=\)|\s)'
      scope: dynamic-keyword.urtext

  var-word:
    - meta_scope: format-string.urtext
    - match: \$[A-Za-z0-9_-]+
      scope: dynamic-def-format-var.urtext
   

  function-with-keywords-only:
    - match: \(
      scope: dynamic-definition-parens
      push: function-with-keywords-only-parameters
    - match: (?<=\))
      pop: true

  function-with-keywords-only-parameters:
    - include: dynamic-keyword
    - match: \)
      scope: dynamic-definition-parens
      pop: true

  # Functions with node title
  # ID, TREE

  function-with-node-id:
    - match: \(
      scope: dynamic-definition-parens
      push: function-with-node-id-parameters
    - match: (?<=\))
      pop: true

  function-with-node-id-parameters:
    - include: node_link
    - include: output-flags
    - include: file_link
    - include: node-id-in-dynamic-definition
    - match: \)
      scope: dynamic-definition-parens
      pop: true

  function-with-optional-parameters:
    - match: \(
      scope: dynamic-definition-parens
      push: function-with-keywords-only-parameters
    - match: (?<=\))
      pop: true

  function-with-filename:
    - match: \(
      scope: dynamic-definition-parens
      push: function-with-filename
    - match: (?<=\))
      pop: true

  # Node Nesting

  inline-node-1: 
    - meta_scope: inline_node_1
    - include: syntax-main
    - match: '(?<!\\){'
      scope: punctuation.section.braces.begin.inline_node_2.urtext
      push: inline-node-2
    - match: '(?<!\\)}'
      scope: punctuation.section.braces.end.inline_node_1.urtext
      pop: true
   
  inline-node-2: 
    - meta_scope: inline_node_2 
    - include: syntax-main
    - match: '(?<!\\)}'
      scope: punctuation.section.braces.end.inline_node_2.urtext
      pop: true
    - match: '(?<!\\){'
      scope: punctuation.section.braces.begin.inline_node_3.urtext
      push: inline-node-3
    

  inline-node-3: 
    - meta_scope: inline_node_3
    - include: syntax-main
    - match: '(?<!\\)}'
      scope: punctuation.section.braces.end.inline_node_3.urtext
      pop: true
    - match: '(?<!\\){'
      scope: punctuation.section.braces.begin.inline_node_4.urtext
      push: inline-node-4

  inline-node-4: 
    - meta_scope: inline_node_4
    - include: syntax-main
    - match: '(?<!\\){'
      scope: punctuation.section.braces.begin.inline_node_5.urtext
      push: inline-node-5
    - match: '(?<!\\)}'
      scope: punctuation.section.braces.end.inline_node_4.urtext
      pop: true

  inline-node-5: 
    - meta_scope: inline_node_5
    - include: syntax-main
    - match: '(?<!\\)}'
      scope: punctuation.section.braces.end.inline_node_5.urtext
      pop: true

  node_link:
    - match: '(\|\s)([^>]+)>'
      captures: 
        1: link_prefix.urtext
        2: link_id.urtext

  node_pointer:
    - match: '(\|\s)([^>]+)>>{1,2}'
      captures:
        1: pointer_prefix.urtext
        2: pointer_id.urtext

  file_link:
    - match: '(f>{1,2})[^\s][^;]*'
      scope: file_link.urtext

  raw:
    - meta_scope: raw.urtext
    - match: '`'
      pop: true

  node_title:
    - match: '((([^>\n\r_])|(?<!\s)_)+)(\s_)'
      captures:
        1: node_title.urtext
        4: title_marker.urtext
    - match: '`'
      push: raw 

  url:
    - match: '(http(s)?://)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)'
      scope: url_link.urtext

  meta-key-terminator:
    - match: ';'
      scope: punctuation.terminator.urtext

  tagname-separator:
    - match: ';'
      scope: entity.name.tagname_separator.urtext

  tagvalue-separator:
    - match: '\s-\s'
      scope: entity.name.value_separator.urtext

  other-project-link:
    - match: '=>\"(.*?)\"'
      scope: link.other-project.urtext
  
  bold-text:
    - match: '(\*\*)(.*)(\*\*)'
      captures:
        2: bold.urtext

  compact-node: 
    - include: datestamp
    - include: main
    - include: inline-node-1
    - match: .*?
    - meta_scope: compact_node.urtext 
    - match: $
      pop: true